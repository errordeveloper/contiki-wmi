# -*- makefile -*-

# Adapted from Makefile.msp430
# Adapted from Makefile.at91sam7

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/mc1322x

### Define the source files we have in the AT91SAM7S port

CONTIKI_CPU_DIRS = . lib src board dev ../arm/common/dbg-io

MC1322X = debug-uart.c rtimer-arch.c watchdog.c contiki-crm.c contiki-maca.c contiki-misc.c leds-arch.c leds.c contiki-uart.c slip-uart1.c

DBG_IO = dbg-printf.c dbg-snprintf.c dbg-sprintf.c strformat.c

CPU_LIBS = $(notdir $(wildcard $(CONTIKI_CPU)/lib/*.c))
CPU_SRCS = $(notdir $(wildcard $(CONTIKI_CPU)/src/*.c)) $(notdir $(wildcard $(CONTIKI_CPU)/src/*.S))

CONTIKI_TARGET_SOURCEFILES += $(MC1322X) $(DBG_IO) $(CPU_LIBS) $(CPU_SRCS) $(SYSAPPS) $(ELFLOADER) \
			$(TARGETLIBS) $(UIPDRIVERS) $(USB)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

THREADS =

CROSS_COMPILE ?= arm-none-eabi-
#CROSS_COMPILE ?= arm-softfloat-eabi-
CROSS ?= $(CROSS_COMPILE)

### Compiler definitions
CC       = $(CROSS)gcc
LD       = $(CROSS)gcc
AS       = $(CROSS)as
AR       = $(CROSS)ar
NM       = $(CROSS)nm
OBJCOPY  = $(CROSS)objcopy
STRIP    = $(CROSS)strip
GDB	 = $(CROSS)gdb

GDB_COMMAND ?= cgdb -d $(GDB)

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

TEXT_BASE = 0x00400000
export TEXT_BASE
LINKERSCRIPT = $(CONTIKI_CPU)/mc1322x.lds

STARTUP=$(OBJECTDIR)/start.o

ARCH_FLAGS= -mcpu=arm7tdmi-s -mthumb-interwork -march=armv4t -mtune=arm7tdmi-s -DCONFIG_ARM -D__ARM__ #-Wcast-align
THUMB_FLAGS= -mthumb # -mcallee-super-interworking
ARM_FLAGS= -marm

CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) -I$(CONTIKI_CPU)/loader \
	   -I$(CONTIKI_CPU)/dbg-io \
           -I$(CONTIKI)/platform/$(TARGET) \
	   -I$(CONTIKI_CPU)/lib/include \
	   -I$(CONTIKI_CPU)/src \
	   -I$(CONTIKI_CPU)/board \
           ${addprefix -I,$(APPDIRS)} \
           -DWITH_ASCII -DMCK=$(MCK) \
           $(ARCH_FLAGS) -g 

DEBUG_CFLAGS = -Werror 

CFLAGS  += $(CFLAGSNO) -Os -DRUN_AS_SYSTEM -DROM_RUN -fno-strict-aliasing  -fno-common -ffixed-r8 -msoft-float -DTEXT_BASE=$(TEXT_BASE) -fno-builtin-printf -fno-builtin-sprintf
LDFLAGS += -T $(LINKERSCRIPT) -nostartfiles -static -u_start -Wl,-Map=contiki-$(TARGET).map,-export-dynamic
AFLAGS := $(AFLAGS_DEBUG) -D__ASSEMBLY__ $(CPPFLAGS) -gstabs

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__

### Setup directory search path for source files

CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_O=yes

CFLAGS += -I$(OBJECTDIR) -I$(CONTIKI_CPU)/board -DBOARD=$(TARGET)

$(OBJECTDIR)/board.h: $(OBJECTDIR) 
ifneq (,$(findstring Windows,$(OS)))
	${info Cygwin detected.}
	ln -f $(CONTIKI_CPU)/board/$(TARGET).h $(OBJECTDIR)/board.h
else
	ln -sf ../$(CONTIKI_CPU)/board/$(TARGET).h $(OBJECTDIR)/board.h
endif


$(OBJECTDIR)/isr.o: $(CONTIKI_CPU)/src/isr.c
	$(CC) $(CFLAGS) $(ARM_FLAGS) $< -c -o $@

%.o: %.c
	$(CC) $(CFLAGS) $(THUMB_FLAGS) $< -c

$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) $(THUMB_FLAGS) -c $< -o $@

CUSTOM_RULE_S_TO_OBJECTDIR_O = yes

$(OBJECTDIR)/%.o: %.S
	$(CC) $(CFLAGS) $(AFLAGS) $(ARM_FLAGS) $< -c  -o $@

CUSTOM_RULE_C_TO_CO=yes

%.co: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE $(THUMB_FLAGS) $< -c -o $@

.PRECIOUS: %.bin %_$(TARGET).bin

%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

%_$(TARGET).bin: %.elf
	$(OBJCOPY) -O binary $< $@

symbols.c:
	@${CONTIKI}/tools/make-empty-symbols
 
%.$(TARGET): %_$(TARGET).bin
	@

%.elf: $(OBJECTDIR)/board.h  %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) $(OBJECTDIR)/symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) $(filter %.a,$^)

TOOLS = $(CONTIKIMC1322X)/tools/

%.load: %_$(TARGET).bin
	perl $(TOOLS)/mc1322x-load.pl -e -t $(UDEV_UART) \
		-f $<

%.load-reset: %_$(TARGET).bin
	perl $(TOOLS)/mc1322x-load.pl -e -t $(UDEV_UART) \
		-f $< \
		-c 'bbmc -l $(TARGET) reset'

%.load-print: %_$(TARGET).bin
	perl $(TOOLS)/mc1322x-load.pl -t $(UDEV_UART) \
		-f $<

%.load-reset-print: %_$(TARGET).bin
	perl $(TOOLS)/mc1322x-load.pl -t $(UDEV_UART) \
		-f $< \
		-c 'bbmc -l $(TARGET) reset'


ocd:
	openocd -f board/$(TARGET).cfg $(OCD_ARGS)

# for some reason it won't work in background
# even if logging to a file, so will use screen
# it might need a custom scrrenrc file ...
# wthough it could be created dynamically :)

#OCD_SCREENRC = /tmp/$(OCD_SESSION).screenrc
OCD_SCREENRC = .screenrc.$(OCD_SESSION)
OCD_SLEEPSEC = 1.5
ifdef $(OCD_DISTCFG)
  OCD_COMMAND = `which openocd` -f board/$(TARGET).cfg $(OCD_ARGS)
else
  OCD_COMMAND = `which openocd` -f $(CONTIKIMC1322X)/openocd.cfg
endif
OCD_SESSION = ocd:$(TARGET)

OCD_CONNECT = telnet localhost 4444
GDB_CONNECT = target remote localhost:3333

OCD_WINDOWN = bash -c \"echo Sleeping for $(OCD_SLEEPSEC) seconds...; \
	      sleep $(OCD_SLEEPSEC) && # \"

OCD_WINDOW0 = screen -t ocd-log $(OCD_COMMAND)
OCD_WINDOW1 = screen -t ocd-cli $(OCD_WINDOWN) $(OCD_CONNECT)
OCD_WINDOW2 = screen -t ocd-gdb $(OCD_WINDOWN) $(GDB_COMMAND) -ex \'$(GDB_CONNECT)\' $(GDB_BREAKER)
#OCD_WINDOW3 = screen -t ocd-tty $(UDEV_UART) 115200
#can also try `serialview`
OCD_W3BASIC = cat $(UDEV_UART)
OCD_W3EXTRA = bash -c \"echo Press RETURN to show serial port output \
	      		or Control-C to cancel; read && $(OCD_W3BASIC)\"
OCD_WINDOW3 = screen -t ocd-tty $(OCD_W3EXTRA)

%.ocd-screenrc: %.elf
	echo -n > ./$(OCD_SCREENRC).$<
	echo "startup_message off"	>> ./$(OCD_SCREENRC).$<
	echo "deflogin off"		>> ./$(OCD_SCREENRC).$<
	echo "$(OCD_WINDOW0)"		>> ./$(OCD_SCREENRC).$<
	echo "$(OCD_WINDOW1)\""		>> ./$(OCD_SCREENRC).$<
	echo "$(OCD_WINDOW2) $<\""	>> ./$(OCD_SCREENRC).$<
	echo "$(OCD_WINDOW3)"		>> ./$(OCD_SCREENRC).$<

%.ocd-screen: %.elf %.ocd-screenrc
	screen -c ./$(OCD_SCREENRC).$< -S $(OCD_SESSION).$< -t $(OCD_SESSION).$<

%.ocd-hide: %.elf %.ocd-screenrc
	screen -c ./$(OCD_SCREENRC).$< -dm -S $(OCD_SESSION).$< -t $(OCD_SESSION).$<

%.ocd-show: %.elf
	screen -xd $(OCD_SESSION).$<


ocd-screenrc:
	echo -n > /tmp/$(OCD_SCREENRC)
	echo "startup_message off"	>> /tmp/$(OCD_SCREENRC)
	echo "deflogin off"		>> /tmp/$(OCD_SCREENRC)
	echo "$(OCD_WINDOW0)"	>> /tmp/$(OCD_SCREENRC)
	echo "$(OCD_WINDOW1)\""	>> /tmp/$(OCD_SCREENRC)
	# use make %.debug in current terminal instead

ocd-screen: ocd-screenrc
	screen -c /tmp/$(OCD_SCREENRC) -S $(OCD_SESSION) -t $(OCD_SESSION) 

ocd-hide: ocd-screenrc
	screen -c /tmp/$(OCD_SCREENRC) -dm -S $(OCD_SESSION) -t $(OCD_SESSION)
	${info now attach gdb with `make PROG.debug`}

ocd-show:
	screen -r $(OCD_SESSION)

%.debug: %.elf
	$(GDB_COMMAND) -ex '$(GDB_CONNECT)' $<

#TODO: add ocd-xscreen here!
# options are:
# 	creat hidden screen
# 	create screen in current terminal
# 	create screen in new terminal
# 	show screen in current terminal
# 	show screen in new terminal
#
#NOTE: perhaps it can be used for mc1322x loader and other things!
#	there should be a Makefile.tools with all such things
#	that would rely on a bunch of variables such as:
#
#	SCREEN_SESSION: i.e. 'rpl-border-route' or 'ocd:$(TARGET)'
#	SCRENN_RC_FILE: path to file, '/tmp/$@:$(SCREEN_SESSION)'
#	SCREEN_COMMAND:	i.e. 'sudo tunslip6' or 'openocd'
#	SCREEN_WINDOWx: x={1,2,3,4,5,6,7,8,9}
#			suppose it's ok if these are not set, so
#			we will have empty lines in screenrc file
#	XTERM_WINTITLE: i.e. 'Contiki RPL boarder router console'
